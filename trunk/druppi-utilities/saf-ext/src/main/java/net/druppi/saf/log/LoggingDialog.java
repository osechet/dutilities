/*
 * LoggingDialog.java
 *
 * Copyright (C) 2010 Olivier Sechet
 *
 * This library is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library.  If not, see <http://www.gnu.org/licenses/>.
 */
package net.druppi.saf.log;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Insets;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.ActionMap;
import javax.swing.BorderFactory;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextPane;
import javax.swing.JToggleButton;
import javax.swing.JToolBar;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.ScrollPaneConstants;
import javax.swing.SwingConstants;

import net.druppi.saf.Dialog;

import org.jdesktop.application.Action;
import org.jdesktop.application.Application;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.SingleFrameApplication;

/**
 * The LoggingDialog can be used to easily configure logging level during the
 * execution of an application.
 *
 * @param <T> the type of the application.
 *
 * @author Olivier Sechet
 * @version 1.0 - Aug 25, 2010
 */
public class LoggingDialog<T extends SingleFrameApplication> extends Dialog<T> {

    /** The serial version id. */
    private static final long serialVersionUID = 7500527913381457890L;

    /**
     * Creates new form LoggingDialog.
     *
     * @param application the application.
     */
    public LoggingDialog(final T application) {
        super(application, false);
        initComponents();

        levelComboBox.addItem(new LevelRenderer(Level.OFF));
        levelComboBox.addItem(new LevelRenderer(Level.SEVERE));
        levelComboBox.addItem(new LevelRenderer(Level.WARNING));
        levelComboBox.addItem(new LevelRenderer(Level.INFO));
        levelComboBox.addItem(new LevelRenderer(Level.CONFIG));
        levelComboBox.addItem(new LevelRenderer(Level.FINE));
        levelComboBox.addItem(new LevelRenderer(Level.FINER));
        levelComboBox.addItem(new LevelRenderer(Level.FINEST));
        levelComboBox.addItem(new LevelRenderer(Level.ALL));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("nls")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        logPanel = new JPanel();
        toolBar = new JToolBar();
        clearButton = new JButton();
        lockButton = new JToggleButton();
        logScrollPane = new JScrollPane();
        logTextPane = new JTextPane();
        controlPanel = new JPanel();
        levelLabel = new JLabel();
        levelComboBox = new JComboBox();
        advancedButton = new JButton();
        okButton = new JButton();
        applyButton = new JButton();
        cancelButton = new JButton();

        ResourceMap resourceMap = Application.getInstance().getContext().getResourceMap(LoggingDialog.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        addComponentListener(new ComponentAdapter() {
            public void componentHidden(ComponentEvent evt) {
                formComponentHidden(evt);
            }
            public void componentShown(ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        logPanel.setBorder(BorderFactory.createTitledBorder(resourceMap.getString("logPanel.border.title"))); // NOI18N
        logPanel.setName("logPanel"); // NOI18N
        logPanel.setLayout(new BorderLayout());

        toolBar.setFloatable(false);
        toolBar.setRollover(true);
        toolBar.setName("toolBar"); // NOI18N

        ActionMap actionMap = Application.getInstance().getContext().getActionMap(LoggingDialog.class, this);
        clearButton.setAction(actionMap.get("clear")); // NOI18N
        clearButton.setFocusable(false);
        clearButton.setHorizontalTextPosition(SwingConstants.CENTER);
        clearButton.setMargin(new Insets(0, 0, 0, 0));
        clearButton.setName("clearButton"); // NOI18N
        clearButton.setVerticalTextPosition(SwingConstants.BOTTOM);
        toolBar.add(clearButton);

        lockButton.setAction(actionMap.get("lockScroll")); // NOI18N
        lockButton.setFocusable(false);
        lockButton.setHorizontalTextPosition(SwingConstants.CENTER);
        lockButton.setMargin(new Insets(0, 0, 0, 0));
        lockButton.setName("lockButton"); // NOI18N
        lockButton.setVerticalTextPosition(SwingConstants.BOTTOM);
        toolBar.add(lockButton);

        logPanel.add(toolBar, BorderLayout.NORTH);

        logScrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        logScrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        logScrollPane.setName("logScrollPane"); // NOI18N

        logTextPane.setEditable(false);
        logTextPane.setName("logTextPane"); // NOI18N
        logScrollPane.setViewportView(logTextPane);

        logPanel.add(logScrollPane, BorderLayout.CENTER);

        controlPanel.setName("controlPanel"); // NOI18N

        levelLabel.setText(resourceMap.getString("levelLabel.text")); // NOI18N
        levelLabel.setName("levelLabel"); // NOI18N

        levelComboBox.setName("levelComboBox"); // NOI18N

        advancedButton.setAction(actionMap.get("showAdvancedDialog")); // NOI18N
        advancedButton.setName("advancedButton"); // NOI18N

        GroupLayout controlPanelLayout = new GroupLayout(controlPanel);
        controlPanel.setLayout(controlPanelLayout);
        controlPanelLayout.setHorizontalGroup(
            controlPanelLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(controlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(levelLabel)
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(levelComboBox, GroupLayout.PREFERRED_SIZE, 131, GroupLayout.PREFERRED_SIZE)
                .addContainerGap(406, Short.MAX_VALUE))
            .addGroup(Alignment.TRAILING, controlPanelLayout.createSequentialGroup()
                .addContainerGap(469, Short.MAX_VALUE)
                .addComponent(advancedButton)
                .addContainerGap())
        );
        controlPanelLayout.setVerticalGroup(
            controlPanelLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(controlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(controlPanelLayout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(levelLabel)
                    .addComponent(levelComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(advancedButton)
                .addContainerGap())
        );

        okButton.setAction(actionMap.get("ok")); // NOI18N
        okButton.setName("okButton"); // NOI18N
        setDefaultButton(okButton);

        applyButton.setAction(actionMap.get("apply")); // NOI18N
        applyButton.setDefaultCapable(false);
        applyButton.setName("applyButton"); // NOI18N

        cancelButton.setAction(actionMap.get("cancel")); // NOI18N
        cancelButton.setDefaultCapable(false);
        cancelButton.setName("cancelButton"); // NOI18N
        setCancelButton(cancelButton);

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(Alignment.TRAILING)
                    .addComponent(controlPanel, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(logPanel, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 580, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(okButton)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(applyButton)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(cancelButton)))
                .addContainerGap())
        );

        layout.linkSize(SwingConstants.HORIZONTAL, new Component[] {applyButton, cancelButton, okButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(logPanel, GroupLayout.DEFAULT_SIZE, 365, Short.MAX_VALUE)
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(controlPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(applyButton)
                    .addComponent(okButton))
                .addContainerGap())
        );

        layout.linkSize(SwingConstants.VERTICAL, new Component[] {applyButton, cancelButton, okButton});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Called when the dialog appears.
     *
     * @param evt the associated event.
     */
    private void formComponentShown(ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        if (handler == null) {
            handler = new TextPaneHandler(logTextPane);
        }
        final Logger root = Logger.getLogger(""); //$NON-NLS-1$
        root.addHandler(handler);

        levelComboBox.setSelectedItem(new LevelRenderer(root.getLevel()));
    }//GEN-LAST:event_formComponentShown

    /**
     * Called when the dialog disappears.
     *
     * @param evt the associated event.
     */
    private void formComponentHidden(ComponentEvent evt) {//GEN-FIRST:event_formComponentHidden
        final Logger root = Logger.getLogger(""); //$NON-NLS-1$
        root.removeHandler(handler);
    }//GEN-LAST:event_formComponentHidden

    /**
     * Called when the OK button is pressed.
     */
    @Action
    public void ok() {
        apply();
        setVisible(false);
    }

    /**
     * Called when the Apply button is pressed.
     */
    @Action
    public void apply() {
        final LevelRenderer renderer = (LevelRenderer) levelComboBox.getSelectedItem();
        final Logger root = Logger.getLogger(""); //$NON-NLS-1$
        root.setLevel(renderer.level);
    }

    /**
     * Called when the Cancel button is pressed.
     */
    @Action
    public void cancel() {
        setVisible(false);
    }

    /**
     * Called when the Advanced button is pressed.
     */
    @Action
    public void showAdvancedDialog() {
        if (loggerListDialog == null) {
            loggerListDialog = new LoggerListDialog<T>(getApplication(), false);
            loggerListDialog.setLocationRelativeTo(this);
        }
        loggerListDialog.setVisible(true);
    }

    /**
     * Called when the Clear button is pressed.
     */
    @Action
    public void clear() {
        handler.clear();
    }

    /**
     * Called when the Lock button is pressed.
     */
    @Action
    public void lockScroll() {
        handler.setScrollLocked(lockButton.isSelected());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JButton advancedButton;
    private JButton applyButton;
    private JButton cancelButton;
    private JButton clearButton;
    private JPanel controlPanel;
    private JComboBox levelComboBox;
    private JLabel levelLabel;
    private JToggleButton lockButton;
    private JPanel logPanel;
    private JScrollPane logScrollPane;
    private JTextPane logTextPane;
    private JButton okButton;
    private JToolBar toolBar;
    // End of variables declaration//GEN-END:variables

    /** The advanced dialog. */
    private LoggerListDialog<T> loggerListDialog;

    /** The handler used to write in the textpane. */
    private TextPaneHandler handler;

    /**
     * A renderer for the Level class.
     *
     * @author Olivier Sechet
     * @version 1.0 - Aug 25, 2010
     */
    private static final class LevelRenderer {

        /** The delegate level. */
        private Level level;

        /**
         * Creates a new LevelRenderer.
         *
         * @param level the delegate level.
         */
        public LevelRenderer(final Level level) {
            this.level = level;
        }

        /**
         * {@inheritDoc}
         */
        @Override
        public String toString() {
            return level.getLocalizedName();
        }

        /**
         * {@inheritDoc}
         */
        @Override
        public boolean equals(final Object obj) {
            if (!(obj instanceof LoggingDialog.LevelRenderer)) {
                return false;
            }
            if (obj == this) {
                return true;
            }
            final LoggingDialog.LevelRenderer that = (LoggingDialog.LevelRenderer) obj;
            return this.level.equals(that.level);
        }

        /**
         * {@inheritDoc}
         */
        @Override
        public int hashCode() {
            return level.hashCode();
        }
    }
}
